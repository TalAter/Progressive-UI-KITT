{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt-sw-helper.js"],"names":["_postMessageToAllClients","payload","type","self","clients","matchAll","includeUncontrolled","then","forEach","client","postMessage","action","addMessage","contents","options","addAlert","buttonLabel","buttonCallback","context","addConfirm","button1Label","button1Callback","button2Label","button2Callback","context1","context2","module","exports"],"mappings":"AAAA;ACUA,YAGA,IAAIA,0BAA2B,SAASC,EAASC,GAC/CC,KAAKC,QAAQC,UAAWC,qBAAqB,IAAQC,KAAK,SAAAH,GACxDA,EAAQI,QAAQ,SAAAC,GACdA,EAAOC,aAAaC,OAAAA,SAAiBT,EAAQD,QAASA,SAYxDW,WAAa,SAASC,EAAUC,GAClCd,0BACEa,SAAAA,EACAC,QAAAA,GACC,YAaDC,SAAW,SAASF,EAAUG,EAAaC,EAAgBH,EAASI,GACtElB,0BACEa,SAAAA,EACAG,YAAAA,EACAC,eAAAA,EACAH,QAAAA,EACAI,QAAAA,GACC,UAgBDC,WAAa,SAASN,EAAUO,EAAcC,EAAiBC,EAAcC,EAAiBT,EAASU,EAAUC,GACnHzB,0BACEa,SAAAA,EACAO,aAAAA,EACAC,gBAAAA,EACAC,aAAAA,EACAC,gBAAAA,EACAT,QAAAA,EACAU,SAAAA,EACAC,SAAAA,GACC,WAGLC,QAAOC,SACLf,WAAAA,WACAG,SAAAA,SACAI,WAAAA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n <!--\n Progressive UI KITT\n version : 0.0.1\n author  : Tal Ater @TalAter\n license : MIT\n https://github.com/TalAter/Progressive-UI-KITT\n -->\n */\n\n\"use strict\";\n\n// Method used to post messages to all of a service worker's clients, including uncontrolled ones.\nvar _postMessageToAllClients = function(payload, type) {\n  self.clients.matchAll({ includeUncontrolled: true }).then(clients => {\n    clients.forEach(client => {\n      client.postMessage({action: `pkitt-${type}`, payload: payload});\n    });\n  });\n};\n\n/**\n * Draws a new message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @method addMessage\n */\nvar addMessage = function(contents, options) {\n  _postMessageToAllClients({\n    contents,\n    options\n  }, 'message');\n};\n\n/**\n * Draws a new alert message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string buttonLabel The text to appear on the button (defaults to `OK`)\n * @param function buttonCallback A callback function to be called when button is pressed (defaults to dismissing message)\n * @param Object options Options for this message\n * @param Object context Optional context for the callback function. Defaults to ProgressiveKITT\n * @method addAlert\n */\nvar addAlert = function(contents, buttonLabel, buttonCallback, options, context) {\n  _postMessageToAllClients({\n    contents,\n    buttonLabel,\n    buttonCallback,\n    options,\n    context\n  }, 'alert');\n};\n\n/**\n * Draws a confirmation message to the GUI with two buttons.\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string button1Label The text to appear on the 1st button (defaults to `OK`)\n * @param function button1Callback A callback function to be called when 1st button is pressed (defaults to dismissing message)\n * @param string button2Label The text to appear on the 2nd button (defaults to `Cancel`)\n * @param function button2Callback A callback function to be called when button is pressed (defaults to dismissing message)\n * @param Object options Options for this message\n * @param Object context1 Optional context for the 1st callback function. Defaults to ProgressiveKITT\n * @param Object context2 Optional context for the 2nd callback function. Defaults to ProgressiveKITT\n * @method addConfirm\n */\nvar addConfirm = function(contents, button1Label, button1Callback, button2Label, button2Callback, options, context1, context2) {\n  _postMessageToAllClients({\n    contents,\n    button1Label,\n    button1Callback,\n    button2Label,\n    button2Callback,\n    options,\n    context1,\n    context2\n  }, 'confirm');\n};\n\nmodule.exports = {\n  addMessage,\n  addAlert,\n  addConfirm\n};\n"]}