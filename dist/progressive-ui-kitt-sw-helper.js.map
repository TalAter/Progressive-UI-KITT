{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt-sw-helper.js"],"names":["_postMessageToClients","payload","type","client","message","action","self","clients","get","then","postMessage","matchAll","includeUncontrolled","forEach","_parseButtonObject","button","label","addMessage","contents","options","addAlert","arguments","length","undefined","addConfirm","button1","button2","module","exports"],"mappings":"AAAA;ACUA,YAGA,IAAIA,uBAAwB,SAASC,EAASC,EAAMC,GAClD,GAAMC,IAAWC,OAAAA,SAAiBH,EAAQD,QAASA,EAC/CE,GACE,gBAAoBA,GACtBG,KAAKC,QAAQC,IAAIL,GAAQM,KAAK,SAASN,GACrCA,EAAOO,YAAYN,KAGrBD,EAAOO,YAAYN,GAGrBE,KAAKC,QAAQI,UAAWC,qBAAqB,IAAQH,KAAK,SAAAF,GACxDA,EAAQM,QAAQ,SAAAV,GACdA,EAAOO,YAAYN,QAOvBU,mBAAqB,SAASC,GAChC,MAAQ,gBAAoBA,IAAWC,MAAOD,GAAUA,GAWtDE,WAAa,SAASC,EAAUC,EAAShB,GAC3CH,uBACEkB,SAAAA,EACAC,QAAAA,GACC,UAAWhB,IAYZiB,SAAW,SAASF,GAA2D,GAAjDH,GAAiDM,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAxC,KAAMF,EAAkCE,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MAApBlB,EAAoBkB,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAXE,MACtER,GAASD,mBAAmBC,GAC5Bf,uBACEkB,SAAAA,EACAH,QACEC,MAAOD,EAAOC,OAEhBG,QAAAA,GACC,QAAShB,IAaVqB,WAAa,SAASN,GAAgF,GAAtEO,GAAsEJ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAA5D,KAAMK,EAAsDL,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAA5C,SAAUF,EAAkCE,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MAApBlB,EAAoBkB,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAXE,MAC7FE,GAAUX,mBAAmBW,GAC7BC,EAAUZ,mBAAmBY,GAC7B1B,uBACEkB,SAAAA,EACAO,SACET,MAAOS,EAAQT,OAEjBU,SACEV,MAAOU,EAAQV,OAEjBG,QAAAA,GACC,UAAWhB,GAGhBwB,QAAOC,SACLX,WAAAA,WACAG,SAAAA,SACAI,WAAAA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n <!--\n Progressive UI KITT\n version : 0.0.1\n author  : Tal Ater @TalAter\n license : MIT\n https://github.com/TalAter/Progressive-UI-KITT\n -->\n */\n\n\"use strict\";\n\n// Method used to post messages to all of a service worker's clients, including uncontrolled ones.\nvar _postMessageToClients = function(payload, type, client) {\n  const message = {action: `pkitt-${type}`, payload: payload};\n  if (client) {\n    if ('string' === typeof client) {\n      self.clients.get(client).then(function(client) {\n        client.postMessage(message);\n      });\n    } else {\n      client.postMessage(message);\n    }\n  } else {\n    self.clients.matchAll({ includeUncontrolled: true }).then(clients => {\n      clients.forEach(client => {\n        client.postMessage(message);\n      });\n    });\n  }\n};\n\n// Parse a button argument to make sure it is an object with the structure and contents KITT expects\nvar _parseButtonObject = function(button) {\n  return ('string' === typeof button) ? {label: button} : button;\n};\n\n/**\n * Draws a new message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @param string|Object A client ID, or an actual client object to send the message to. Defaults to all clients.\n * @method addMessage\n */\nvar addMessage = function(contents, options, client) {\n  _postMessageToClients({\n    contents,\n    options\n  }, 'message', client);\n};\n\n/**\n * Draws a new alert message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string|Object button The text to appear on the button (defaults to `OK`), or an object containing the label (e.g. {label: 'OK'})\n * @param Object options Options for this message\n * @param string|Object A client ID, or an actual client object to send the message to. Defaults to all clients.\n * @method addAlert\n */\nvar addAlert = function(contents, button = 'OK', options = {}, client = undefined) {\n  button = _parseButtonObject(button);\n  _postMessageToClients({\n    contents,\n    button: {\n      label: button.label\n    },\n    options\n  }, 'alert', client);\n};\n\n/**\n * Draws a confirmation message to the GUI with two buttons.\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string|Object button1 The text to appear on the button (defaults to `OK`), or an object containing the label (e.g. {label: 'OK'})\n * @param string|Object button2 The text to appear on the button (defaults to `Cancel`), or an object containing the label (e.g. {label: 'Cancel'})\n * @param Object options Options for this message\n * @param string|Object A client ID, or an actual client object to send the message to. Defaults to all clients.\n * @method addConfirm\n */\nvar addConfirm = function(contents, button1 = 'OK', button2 = 'Cancel', options = {}, client = undefined) {\n  button1 = _parseButtonObject(button1);\n  button2 = _parseButtonObject(button2);\n  _postMessageToClients({\n    contents,\n    button1: {\n      label: button1.label\n    },\n    button2: {\n      label: button2.label\n    },\n    options,\n  }, 'confirm', client);\n};\n\nmodule.exports = {\n  addMessage,\n  addAlert,\n  addConfirm\n};\n"]}