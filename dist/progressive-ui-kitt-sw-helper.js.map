{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt-sw-helper.js"],"names":["_postMessageToAllClients","payload","type","self","clients","matchAll","includeUncontrolled","then","forEach","client","postMessage","action","_parseButtonObject","button","label","addMessage","contents","options","addAlert","arguments","length","undefined","addConfirm","button1","button2","callback","context","module","exports"],"mappings":"AAAA;ACUA,YAGA,IAAIA,0BAA2B,SAASC,EAASC,GAC/CC,KAAKC,QAAQC,UAAWC,qBAAqB,IAAQC,KAAK,SAAAH,GACxDA,EAAQI,QAAQ,SAAAC,GACdA,EAAOC,aAAaC,OAAAA,SAAiBT,EAAQD,QAASA,SAMxDW,mBAAqB,SAASC,GAChC,MAAQ,gBAAoBA,IAAWC,MAAOD,GAAUA,GAUtDE,WAAa,SAASC,EAAUC,GAClCjB,0BACEgB,SAAAA,EACAC,QAAAA,GACC,YAWDC,SAAW,SAASF,GAAuC,GAA7BH,GAA6BM,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAApB,KAAMF,EAAcE,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KAC7DN,GAASD,mBAAmBC,GAC5Bb,0BACEgB,SAAAA,EACAH,QACEC,MAAOD,EAAOC,OAEhBG,QAAAA,GACC,UAYDK,WAAa,SAASN,GAA4D,GAAlDO,GAAkDJ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAxC,KAAMK,EAAkCL,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAxB,SAAUF,EAAcE,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KACpFI,GAAUX,mBAAmBW,GAC7BC,EAAUZ,mBAAmBY,GAC7BxB,0BACEgB,SAAAA,EACAO,SACET,MAAOS,EAAQT,OAEjBU,SACEV,MAAOU,EAAQV,MACfW,SAAUD,EAAQC,SAClBC,QAASF,EAAQE,SAEnBT,QAAAA,GACC,WAGLU,QAAOC,SACLb,WAAAA,WACAG,SAAAA,SACAI,WAAAA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n <!--\n Progressive UI KITT\n version : 0.0.1\n author  : Tal Ater @TalAter\n license : MIT\n https://github.com/TalAter/Progressive-UI-KITT\n -->\n */\n\n\"use strict\";\n\n// Method used to post messages to all of a service worker's clients, including uncontrolled ones.\nvar _postMessageToAllClients = function(payload, type) {\n  self.clients.matchAll({ includeUncontrolled: true }).then(clients => {\n    clients.forEach(client => {\n      client.postMessage({action: `pkitt-${type}`, payload: payload});\n    });\n  });\n};\n\n// Parse a button argument to make sure it is an object with the structure and contents KITT expects\nvar _parseButtonObject = function(button) {\n  return ('string' === typeof button) ? {label: button} : button;\n};\n\n/**\n * Draws a new message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @method addMessage\n */\nvar addMessage = function(contents, options) {\n  _postMessageToAllClients({\n    contents,\n    options\n  }, 'message');\n};\n\n/**\n * Draws a new alert message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string|Object button The text to appear on the button (defaults to `OK`), or an object containing the label (e.g. {label: 'OK'})\n * @param Object options Options for this message\n * @method addAlert\n */\nvar addAlert = function(contents, button = 'OK', options = {}) {\n  button = _parseButtonObject(button);\n  _postMessageToAllClients({\n    contents,\n    button: {\n      label: button.label\n    },\n    options\n  }, 'alert');\n};\n\n/**\n * Draws a confirmation message to the GUI with two buttons.\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string|Object button1 The text to appear on the button (defaults to `OK`), or an object containing the label (e.g. {label: 'OK'})\n * @param string|Object button2 The text to appear on the button (defaults to `Cancel`), or an object containing the label (e.g. {label: 'Cancel'})\n * @param Object options Options for this message\n * @method addConfirm\n */\nvar addConfirm = function(contents, button1 = 'OK', button2 = 'Cancel', options = {}) {\n  button1 = _parseButtonObject(button1);\n  button2 = _parseButtonObject(button2);\n  _postMessageToAllClients({\n    contents,\n    button1: {\n      label: button1.label\n    },\n    button2: {\n      label: button2.label,\n      callback: button2.callback,\n      context: button2.context\n    },\n    options,\n  }, 'confirm');\n};\n\nmodule.exports = {\n  addMessage,\n  addAlert,\n  addConfirm\n};\n"]}