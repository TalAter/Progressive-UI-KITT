{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt.js"],"names":["_stylesheet","_stylesheetNode","_guiNodes","_messages","_listenersRegistered","_guiCreated","undefined","_updateStylesheet","href","document","createElement","rel","id","body","appendChild","_createGUI","innerHTML","style","display","_addMessage","contents","options","TypeError","messageId","length","Date","now","newMessageNode","classList","add","newMessage","push","setTimeout","isFinite","hideAfter","remove","parentNode","removeChild","_messageListener","event","data","action","msg","_registerListeners","navigator","serviceWorker","addEventListener","vroom","this","render","setStylesheet","stylesheet","deleteMessages","message","shift","node","getElementById","addMessage","hide","show","module","exports"],"mappings":"AAAA;ACUA,YAEA,IAAIA,aACAC,gBAEAC,UAEAC,aAEAC,sBAAuB,EAGvBC,YAAc,WAChB,MAAqBC,UAAdJ,WAILK,kBAAoB,WAClBP,aAAeK,gBACbJ,gBACFA,gBAAgBO,KAAOR,aAEvBC,gBAAkBQ,SAASC,cAAc,QACzCT,gBAAgBU,IAAM,aACtBV,gBAAgBO,KAAOR,YACvBC,gBAAgBW,GAAK,8BACrBH,SAASI,KAAKC,YAAYb,oBAM5Bc,WAAa,WAEfb,UAAYO,SAASC,cAAc,OACnCR,UAAUU,GAAK,qBACfV,UAAUc,UAAY,GACtBd,UAAUe,MAAMC,QAAU,OAC1BT,SAASI,KAAKC,YAAYZ,WAE1BK,qBAIEY,YAAc,SAASC,EAAUC,GACnC,GAAKhB,eAGmB,gBAAbe,GAAX,CAIA,GADAC,EAAUA,MACa,gBAAZA,GACT,KAAM,IAAIC,WAAU,yBAGtB,IAAIC,GAAYpB,UAAUqB,OAAOC,KAAKC,MAElCC,EAAiBlB,SAASC,cAAc,MAC5CiB,GAAef,GAAK,2BAA2BW,EAC/CI,EAAeX,UAAYI,EAC3BO,EAAeC,UAAUC,IAAI,0BAE7B,IAAIC,IACFlB,GAAIW,EACJH,SAAUA,EAuBZ,OApBAjB,WAAU4B,KAAKD,GAEf5B,UAAUY,YAAYa,GAEtBK,WAAW,WACTL,EAAeC,UAAUC,IAAI,mCAC5B,GAECI,SAASZ,EAAQa,YAAcb,EAAQa,UAAY,GACrDF,WAAW,WACTL,EAAeC,UAAUO,OAAO,kCAChCH,WAAW,WAELL,GAAkBA,EAAeS,YACnCT,EAAeS,WAAWC,YAAYV,IAEvC,MACFN,EAAQa,WAGNX,IAILe,iBAAmB,SAASC,GACJ,gBAAfA,GAAMC,MAA2C,kBAAtBD,EAAMC,KAAKC,QAC/CtB,YAAYoB,EAAMC,KAAKE,MAKvBC,mBAAqB,WACnBvC,sBAGD,iBAAmBwC,aACpBA,UAAUC,cAAcC,iBAAiB,UAAWR,kBACpDlC,sBAAuB,IAavB2C,MAAQ,WACVC,KAAKC,UASHA,OAAS,WACXN,qBAEKtC,eACHU,cAeAmC,cAAgB,SAASC,GAC3BnD,YAAcmD,EACd5C,qBAQE6C,eAAiB,WAEnB,IADA,GAAIC,GACqC/C,UAAjC+C,EAAUlD,UAAUmD,UAAwB,CAClD,GAAIC,GAAO9C,SAAS+C,eAAe,2BAA2BH,EAAQzC,GAClE2C,IAAQA,EAAKnB,YACfmB,EAAKnB,WAAWC,YAAYkB,KAY9BE,WAAa,SAASrC,EAAUC,GAElC,MAAOF,aAAYC,EAAUC,IAU3BqC,KAAO,WACT,IAAKrD,cACH,KAAM,IAAIiB,WAAU,gDAEtBpB,WAAU0B,UAAUC,IAAI,+BAUtB8B,KAAO,WACT,IAAKtD,cACH,KAAM,IAAIiB,WAAU,gDAEtBpB,WAAU0B,UAAUO,OAAO,8BAI7ByB,QAAOC,SACLX,cAAeA,cACfH,MAAOA,MACPE,OAAQA,OACRQ,WAAYA,WACZL,eAAgBA,eAChBO,KAAMA,KACND,KAAMA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n<!--\nProgressive UI KITT\nversion : 0.0.1\nauthor  : Tal Ater @TalAter\nlicense : MIT\nhttps://github.com/TalAter/Progressive-UI-KITT\n-->\n*/\n\n\"use strict\";\n\nvar _stylesheet;\nvar _stylesheetNode;\n\nvar _guiNodes;\n\nvar _messages = [];\n\nvar _listenersRegistered = false;\n\n// Checks if GUI was already created\nvar _guiCreated = function () {\n  return _guiNodes !== undefined;\n};\n\n// Attach a style sheet if GUI already attached, if already attached, update it's href\nvar _updateStylesheet = function() {\n  if (_stylesheet && _guiCreated()) {\n    if (_stylesheetNode) {\n      _stylesheetNode.href = _stylesheet;\n    } else {\n      _stylesheetNode = document.createElement('link');\n      _stylesheetNode.rel = 'stylesheet';\n      _stylesheetNode.href = _stylesheet;\n      _stylesheetNode.id = 'progressivekitt-style-sheet';\n      document.body.appendChild(_stylesheetNode);\n    }\n  }\n};\n\n// Called once to generate the GUI nodes\nvar _createGUI = function() {\n  // create GUI\n  _guiNodes = document.createElement('div');\n  _guiNodes.id = 'progressivekitt-ui';\n  _guiNodes.innerHTML = '';\n  _guiNodes.style.display = 'none';\n  document.body.appendChild(_guiNodes);\n\n  _updateStylesheet();\n};\n\n// Adds a new message and draws it\nvar _addMessage = function(contents, options) {\n  if (!_guiCreated()) {\n    return;\n  }\n  if (typeof contents !== 'string') {\n    return;\n  }\n  options = options || {};\n  if (typeof options !== 'object') {\n    throw new TypeError('Invalid options object');\n  }\n\n  var messageId = _messages.length+Date.now();\n\n  var newMessageNode = document.createElement('div');\n  newMessageNode.id = 'progressivekitt-message-'+messageId;\n  newMessageNode.innerHTML = contents;\n  newMessageNode.classList.add('progressivekitt-message');\n\n  var newMessage = {\n    id: messageId,\n    contents: contents\n  };\n\n  _messages.push(newMessage);\n\n  _guiNodes.appendChild(newMessageNode);\n\n  setTimeout(function() {\n    newMessageNode.classList.add('progressivekitt-message--shown');\n  }, 1);\n\n  if (isFinite(options.hideAfter) && options.hideAfter > 0) {\n    setTimeout(function() {\n      newMessageNode.classList.remove('progressivekitt-message--shown');\n      setTimeout(function() {\n        // @TODO: Refactor to _deleteMessage method\n        if (newMessageNode && newMessageNode.parentNode) {\n          newMessageNode.parentNode.removeChild(newMessageNode);\n        }\n      }, 1000);\n    }, options.hideAfter);\n  }\n\n  return messageId;\n};\n\n// A listener used to parse messages posted from the service worker\nvar _messageListener = function(event) {\n  if (typeof event.data === 'object' && event.data.action === 'pkitt-message') {\n    _addMessage(event.data.msg);\n  }\n};\n\n// Register event listener for messages posted from the service worker\nvar _registerListeners = function() {\n  if (_listenersRegistered) {\n    return;\n  }\n  if('serviceWorker' in navigator){\n    navigator.serviceWorker.addEventListener('message', _messageListener);\n    _listenersRegistered = true;\n  }\n};\n\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * Identical to calling `ProgressiveKITT.render();` but less magical.\n *\n * @method vroom\n * @see [render()](#render)\n */\nvar vroom = function() {\n  this.render();\n};\n\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * @method render\n */\nvar render = function() {\n  _registerListeners();\n\n  if (!_guiCreated()) {\n    _createGUI();\n  }\n};\n\n\n/**\n * Set the URL for the stylesheet for the UI\n *\n * If a stylesheet was previously set, calling this again will update the\n * interface with a new stylesheet (if the interface was already rendered,\n * it will be updated)\n *\n * @param string stylesheet relative or absolute url to the stylesheet\n * @method setStylesheet\n */\nvar setStylesheet = function(stylesheet) {\n  _stylesheet = stylesheet;\n  _updateStylesheet();\n};\n\n/**\n * Deletes all existing messages from KITT and removes them from the DOM\n *\n * @method deleteMessages\n */\nvar deleteMessages = function() {\n  var message;\n  while ((message = _messages.shift()) !== undefined) {\n    var node = document.getElementById('progressivekitt-message-'+message.id);\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n};\n\n/**\n * Draws a new message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @method addMessage\n */\nvar addMessage = function(contents, options) {\n  // @TODO: Add settings objects details in doc\n  return _addMessage(contents, options);\n};\n\n/**\n * Call to hide the GUI.\n *\n * Interface must have been previously rendered with render()\n *\n * @method hide\n */\nvar hide = function() {\n  if (!_guiCreated()) {\n    throw new TypeError('cannot hide interface. Must be rendered first');\n  }\n  _guiNodes.classList.add('progressivekitt-ui--hidden');\n};\n\n/**\n * Call to show the GUI if it has been hidden with hide()\n *\n * Interface must have been previously rendered with render()\n *\n * @method show\n */\nvar show = function() {\n  if (!_guiCreated()) {\n    throw new TypeError('cannot show interface. Must be rendered first');\n  }\n  _guiNodes.classList.remove('progressivekitt-ui--hidden');\n};\n\n\nmodule.exports = {\n  setStylesheet: setStylesheet,\n  vroom: vroom,\n  render: render,\n  addMessage: addMessage,\n  deleteMessages: deleteMessages,\n  show: show,\n  hide: hide\n};\n"]}