{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt.js"],"names":["_stylesheet","_stylesheetNode","_guiNodes","_debugState","_messages","_listenersRegistered","_logMessage","text","extraParameters","arguments","length","undefined","indexOf","console","log","_guiCreated","_updateStylesheet","href","document","createElement","rel","id","body","appendChild","_createGUI","innerHTML","style","display","_addMessage","contents","options","_typeof","messageId","Date","now","_len","buttons","Array","_key","forEach","button","buttonId","label","newMessageNode","classList","add","newMessage","push","buttonCallback","cb","apply","context","ProgressiveKITT","deleteMessage","getElementById","addEventListener","setTimeout","isFinite","hideAfter","_messageListener","_ref","data","payload","action","addMessage","addAlert","buttonLabel","addConfirm","button1Label","button1Callback","button2Label","button2Callback","context1","context2","_registerListeners","navigator","serviceWorker","_deleteMessageFromDOM","msgID","node","remove","parentNode","removeChild","vroom","this","render","setStylesheet","stylesheet","deleteMessages","message","shift","messagesLength","filter","hide","show","debug","newState","module","exports"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n<!--\nProgressive UI KITT\nversion : 0.0.1\nauthor  : Tal Ater @TalAter\nlicense : MIT\nhttps://github.com/TalAter/Progressive-UI-KITT\n-->\n*/\n\n\"use strict\";\n\nvar _stylesheet;\nvar _stylesheetNode;\nvar _guiNodes;\nvar _debugState = false;\nvar _messages = [];\nvar _listenersRegistered = false;\n\n// method for logging to the console if debug mode is on\nvar _logMessage = function(text, extraParameters = 'font-weight: bold; color: #00f;') {\n  if (!_debugState) {\n    return;\n  }\n  if (text.indexOf('%c') === -1 && !extraParameters) {\n    console.log(text);\n  } else {\n    console.log(text, extraParameters);\n  }\n};\n\n// Checks if GUI was already created\nvar _guiCreated = function () {\n  return _guiNodes !== undefined;\n};\n\n// Attach a style sheet if GUI already attached, if already attached, update it's href\nvar _updateStylesheet = function() {\n  if (_stylesheet && _guiCreated()) {\n    if (_stylesheetNode) {\n      _stylesheetNode.href = _stylesheet;\n    } else {\n      _stylesheetNode = document.createElement('link');\n      _stylesheetNode.rel = 'stylesheet';\n      _stylesheetNode.href = _stylesheet;\n      _stylesheetNode.id = 'progressivekitt-style-sheet';\n      document.body.appendChild(_stylesheetNode);\n    }\n  }\n};\n\n// Called once to generate the GUI nodes\nvar _createGUI = function() {\n  // create GUI\n  _guiNodes = document.createElement('div');\n  _guiNodes.id = 'progressivekitt-ui';\n  _guiNodes.innerHTML = '';\n  _guiNodes.style.display = 'none';\n  document.body.appendChild(_guiNodes);\n\n  _updateStylesheet();\n};\n\n// Adds a new message and draws it\nvar _addMessage = function(contents, options, ...buttons) {\n  // @TODO: Keep message id in a data attribute\n  if (!_guiCreated()) {\n    return;\n  }\n  if (typeof contents !== 'string') {\n    return;\n  }\n  options = options || {};\n  if (typeof options !== 'object') {\n    _logMessage('Invalid options object');\n  }\n\n  var messageId = _messages.length+Date.now();\n\n  // Add buttons to contents if needed\n  buttons.forEach((button, buttonId) => {\n    if (button) {\n      contents += `<span class=\"progressivekitt-button\" id=\"progressivekitt-button-${buttonId}-${messageId}\">${button.label}</span>`;\n    }\n  });\n\n  var newMessageNode = document.createElement('div');\n  newMessageNode.id = `progressivekitt-message-${messageId}`;\n  newMessageNode.innerHTML = contents;\n  newMessageNode.classList.add('progressivekitt-message');\n\n  var newMessage = {\n    id: messageId,\n    contents: contents\n  };\n\n  _messages.push(newMessage);\n\n  _guiNodes.appendChild(newMessageNode);\n\n  // Add button actions\n  buttons.forEach((button, buttonId) => {\n    if (button) {\n      var buttonCallback = function() {\n        if (button.cb) {\n          button.cb.apply(button.context);\n        }\n        ProgressiveKITT.deleteMessage(messageId);\n      };\n      document.getElementById(`progressivekitt-button-${buttonId}-${messageId}`).addEventListener(\"click\", buttonCallback, false);\n    }\n  });\n\n  //Delay showing of the message by 20 ms. Helps make sure CSS animations happen consistently.\n  setTimeout(() => {\n    newMessageNode.classList.add('progressivekitt-message--shown');\n  }, 20);\n\n  if (isFinite(options.hideAfter) && options.hideAfter > 0) {\n    setTimeout(() => {\n      ProgressiveKITT.deleteMessage(messageId);\n    }, options.hideAfter);\n  }\n\n  return messageId;\n};\n\n// A listener used to parse messages posted from the service worker\nvar _messageListener = function({data: data}) {\n  if (typeof data === 'object') {\n    var payload = data.payload;\n    switch (data.action) {\n      case 'pkitt-message':\n        ProgressiveKITT.addMessage(payload.contents, payload.options);\n        break;\n      case 'pkitt-alert':\n        ProgressiveKITT.addAlert(payload.contents, payload.buttonLabel, payload.buttonCallback, payload.options, payload.context);\n        break;\n      case 'pkitt-confirm':\n        ProgressiveKITT.addConfirm(payload.contents, payload.button1Label, payload.button1Callback, payload.button2Label, payload.button2Callback, payload.options, payload.context1, payload.context2);\n        break;\n    }\n  }\n};\n\n// Register event listener for messages posted from the service worker\nvar _registerListeners = function() {\n  if (_listenersRegistered) {\n    return;\n  }\n  if('serviceWorker' in navigator){\n    navigator.serviceWorker.addEventListener('message', _messageListener);\n    _listenersRegistered = true;\n  }\n};\n\nvar _deleteMessageFromDOM = function(msgID) {\n  var node = document.getElementById(`progressivekitt-message-${msgID}`);\n  node.classList.remove('progressivekitt-message--shown');\n  setTimeout(() => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }, 1000);\n};\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * Identical to calling `ProgressiveKITT.render();` but less magical.\n *\n * @method vroom\n * @see [render()](#render)\n */\nvar vroom = function() {\n  this.render();\n};\n\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * @method render\n */\nvar render = function() {\n  _registerListeners();\n\n  if (!_guiCreated()) {\n    _createGUI();\n  }\n};\n\n\n/**\n * Set the URL for the stylesheet for the UI\n *\n * If a stylesheet was previously set, calling this again will update the\n * interface with a new stylesheet (if the interface was already rendered,\n * it will be updated)\n *\n * @param string stylesheet relative or absolute url to the stylesheet\n * @method setStylesheet\n */\nvar setStylesheet = function(stylesheet) {\n  _stylesheet = stylesheet;\n  _updateStylesheet();\n};\n\n/**\n * Deletes all existing messages from KITT and removes them from the DOM\n *\n * @method deleteMessages\n */\nvar deleteMessages = function() {\n  var message;\n  while ((message = _messages.shift()) !== undefined) {\n    _deleteMessageFromDOM(message.id);\n  }\n};\n\n/**\n * Deletes a single message from KITT and removes it from the DOM\n *\n * @param msgID\n * @method deleteMessage\n */\nvar deleteMessage = function(msgID) {\n  var messagesLength = _messages.length;\n  // Remove from array of messages\n  _messages = _messages.filter((message) => {\n    return message.id !== msgID;\n  });\n  // If message id was not found, log a notice to console.\n  if (messagesLength === _messages.length) {\n    _logMessage('deleteMessage() did not find the message with the id', msgID);\n    return;\n  }\n  _deleteMessageFromDOM(msgID);\n};\n\n\n\n/**\n * Draws a message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @method addMessage\n */\nvar addMessage = function(contents, options) {\n  // @TODO: Add settings objects details in doc\n  return _addMessage(contents, options);\n};\n\n/**\n * Draws a message to the GUI with a single button.\n * Defaults: Button is labeled `OK` and dismisses the message.\n *\n * Some examples:\n * ````javascript\n * // Create a simple alert with some text and the default button labeled `OK` which will dismiss the alert:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics');\n *\n * // Create an alert with a button that will log the function's context (i.e. this) to the console.\n * // Context will be the ProgressiveKITT object by default:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', 'Go!', function() {console.log(this);});\n * // Same as the previous example but the callback function will be run with the window as its context (ie this)\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', 'Go!', function() {console.log(this);}, {}, window);\n * ````\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string buttonLabel The text to appear on the button (defaults to `OK`)\n * @param function buttonCallback A callback function to be called when button is pressed (defaults to dismissing message)\n * @param Object options Options for this message\n * @param Object context Optional context for the callback function. Defaults to ProgressiveKITT\n * @method addAlert\n */\nvar addAlert = function(contents, buttonLabel = 'OK', buttonCallback = undefined, options = undefined, context = this) {\n  // @TODO: Add settings objects details in doc\n  return _addMessage(contents, options, {label: buttonLabel, cb: buttonCallback, context: context});\n};\n\n/**\n * Draws a message to the GUI with two buttons.\n * Defaults: Buttons are labeled `OK` and `Cancel` and both dismiss the message.\n *\n * Some examples:\n * ````javascript\n * // Create a simple confirmation with some text and two default button labeled `OK` and `cancel` which will dismiss the alert:\n * ProgressiveKITT.addConfirm('You know what the chain of command is?');\n *\n * // Create a confirmation with a yes and no buttons that will log each function's context (i.e. this) to the console.\n * // Context will be the ProgressiveKITT object by default:\n * ProgressiveKITT.addConfirm('Ready?', 'Yes', function() {console.log('Yes!');}, 'No',  function() {console.log('No!');});\n * // Same as the previous example but the callback functions will be run with the window as its context (ie this)\n * ProgressiveKITT.addConfirm('Ready?', 'Yes', function() {console.log('Yes!');}, 'No',  function() {console.log('No!');}, {}, window, window);\n * ````\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string button1Label The text to appear on the 1st button (defaults to `OK`)\n * @param function button1Callback A callback function to be called when 1st button is pressed (defaults to dismissing message)\n * @param string button2Label The text to appear on the 2nd button (defaults to `Cancel`)\n * @param function button2Callback A callback function to be called when button is pressed (defaults to dismissing message)\n * @param Object options Options for this message\n * @param Object context1 Optional context for the 1st callback function. Defaults to ProgressiveKITT\n * @param Object context2 Optional context for the 2nd callback function. Defaults to ProgressiveKITT\n * @method addConfirm\n */\nvar addConfirm = function(contents, button1Label = 'OK', button1Callback = undefined, button2Label = 'Cancel', button2Callback = undefined, options = undefined, context1 = this, context2 = this) {\n  // @TODO: Add settings objects details in doc\n  return _addMessage(contents, options, {label: button1Label, cb: button1Callback, context: context1}, {label: button2Label, cb: button2Callback, context: context2});\n};\n\n/**\n * Call to hide the GUI.\n *\n * Interface must have been previously rendered with render()\n *\n * @method hide\n */\nvar hide = function() {\n  if (!_guiCreated()) {\n    _logMessage('cannot hide interface. Must be rendered first');\n  }\n  _guiNodes.classList.add('progressivekitt-ui--hidden');\n};\n\n/**\n * Call to show the GUI if it has been hidden with hide()\n *\n * Interface must have been previously rendered with render()\n *\n * @method show\n */\nvar show = function() {\n  if (!_guiCreated()) {\n    _logMessage('cannot show interface. Must be rendered first');\n  }\n  _guiNodes.classList.remove('progressivekitt-ui--hidden');\n};\n\n/**\n * Turn output of debug messages to the console on or off.\n *\n * * Debug is off by default.\n * * Calling with no arguments will turn debug on.\n *\n * Examples:\n * ````javascript\n * ProgressiveKITT.debug();       // turns debug messages on\n * ProgressiveKITT.debug(true);   // turns debug messages on\n * ProgressiveKITT.debug(false);  // turns debug messages off\n * ````\n *\n * @param {boolean} [newState=true] - Turn on/off debug messages\n * @method debug\n */\nvar debug = function(newState = true) {\n  _debugState = !!newState;\n};\n\n\nmodule.exports = {\n  setStylesheet:    setStylesheet,\n  vroom:            vroom,\n  render:           render,\n  addMessage:       addMessage,\n  addAlert:         addAlert,\n  addConfirm:       addConfirm,\n  deleteMessages:   deleteMessages,\n  deleteMessage:    deleteMessage,\n  show:             show,\n  hide:             hide,\n  debug:            debug\n};\n"]}