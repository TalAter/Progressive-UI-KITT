{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt.js"],"names":["_stylesheet","_stylesheetNode","_guiNodes","_debugState","_debugStyle","_messages","_listenersRegistered","_logMessage","text","extraParameters","indexOf","console","log","_guiCreated","undefined","_updateStylesheet","href","document","createElement","rel","id","body","appendChild","_createGUI","innerHTML","style","display","_addMessage","contents","options","button1","button2","messageId","length","Date","now","forEach","button","buttonId","label","newMessageNode","classList","add","newMessage","push","buttonCallback","cb","apply","context","ProgressiveKITT","deleteMessage","getElementById","addEventListener","setTimeout","isFinite","hideAfter","_messageListener","event","data","payload","action","addMessage","addAlert","buttonLabel","addConfirm","button1Label","button1Callback","button2Label","button2Callback","context1","context2","_registerListeners","navigator","serviceWorker","_deleteMessageFromDOM","msgID","node","remove","parentNode","removeChild","vroom","this","render","setStylesheet","stylesheet","deleteMessages","message","shift","messagesLength","filter","hide","show","debug","newState","arguments","module","exports"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n<!--\nProgressive UI KITT\nversion : 0.0.1\nauthor  : Tal Ater @TalAter\nlicense : MIT\nhttps://github.com/TalAter/Progressive-UI-KITT\n-->\n*/\n\n\"use strict\";\n\nvar _stylesheet;\nvar _stylesheetNode;\nvar _guiNodes;\nvar _debugState = false;\nvar _debugStyle = 'font-weight: bold; color: #00f;';\nvar _messages = [];\nvar _listenersRegistered = false;\n\n// method for logging to the console if debug mode is on\nvar _logMessage = function(text, extraParameters) {\n  if (!_debugState) {\n    return;\n  }\n  if (text.indexOf('%c') === -1 && !extraParameters) {\n    console.log(text);\n  } else {\n    extraParameters = extraParameters || _debugStyle;\n    console.log(text, extraParameters);\n  }\n};\n\n// Checks if GUI was already created\nvar _guiCreated = function () {\n  return _guiNodes !== undefined;\n};\n\n// Attach a style sheet if GUI already attached, if already attached, update it's href\nvar _updateStylesheet = function() {\n  if (_stylesheet && _guiCreated()) {\n    if (_stylesheetNode) {\n      _stylesheetNode.href = _stylesheet;\n    } else {\n      _stylesheetNode = document.createElement('link');\n      _stylesheetNode.rel = 'stylesheet';\n      _stylesheetNode.href = _stylesheet;\n      _stylesheetNode.id = 'progressivekitt-style-sheet';\n      document.body.appendChild(_stylesheetNode);\n    }\n  }\n};\n\n// Called once to generate the GUI nodes\nvar _createGUI = function() {\n  // create GUI\n  _guiNodes = document.createElement('div');\n  _guiNodes.id = 'progressivekitt-ui';\n  _guiNodes.innerHTML = '';\n  _guiNodes.style.display = 'none';\n  document.body.appendChild(_guiNodes);\n\n  _updateStylesheet();\n};\n\n// Adds a new message and draws it\nvar _addMessage = function(contents, options, button1, button2) {\n  // @TODO: Keep message id in a data attribute\n  if (!_guiCreated()) {\n    return;\n  }\n  if (typeof contents !== 'string') {\n    return;\n  }\n  options = options || {};\n  if (typeof options !== 'object') {\n    _logMessage('Invalid options object');\n  }\n\n  var messageId = _messages.length+Date.now();\n\n  // Add buttons to contents if needed\n  [button1, button2].forEach(function(button, buttonId) {\n    if (button) {\n      contents += '<span class=\"progressivekitt-button\" id=\"progressivekitt-button-'+buttonId+'-'+messageId+'\">'+button.label+'</span>';\n    }\n  });\n\n  var newMessageNode = document.createElement('div');\n  newMessageNode.id = 'progressivekitt-message-'+messageId;\n  newMessageNode.innerHTML = contents;\n  newMessageNode.classList.add('progressivekitt-message');\n\n  var newMessage = {\n    id: messageId,\n    contents: contents\n  };\n\n  _messages.push(newMessage);\n\n  _guiNodes.appendChild(newMessageNode);\n\n  // Add button actions\n  [button1, button2].forEach(function(button, buttonId) {\n    if (button) {\n      var buttonCallback = function() {\n        if (button.cb) {\n          button.cb.apply(button.context);\n        }\n        ProgressiveKITT.deleteMessage(messageId);\n      };\n      document.getElementById('progressivekitt-button-'+buttonId+'-'+messageId).addEventListener(\"click\", buttonCallback, false);\n    }\n  });\n\n  setTimeout(function() {\n    newMessageNode.classList.add('progressivekitt-message--shown');\n  }, 1);\n\n  if (isFinite(options.hideAfter) && options.hideAfter > 0) {\n    setTimeout(function() {\n      ProgressiveKITT.deleteMessage(messageId);\n    }, options.hideAfter);\n  }\n\n  return messageId;\n};\n\n// A listener used to parse messages posted from the service worker\nvar _messageListener = function(event) {\n  var data = event.data;\n  if (typeof event.data === 'object') {\n    var payload = event.data.payload;\n    switch (data.action) {\n      case 'pkitt-message':\n        ProgressiveKITT.addMessage(payload.contents, payload.options);\n        break;\n      case 'pkitt-alert':\n        ProgressiveKITT.addAlert(payload.contents, payload.buttonLabel, payload.buttonCallback, payload.options, payload.context);\n        break;\n      case 'pkitt-confirm':\n        ProgressiveKITT.addConfirm(payload.contents, payload.button1Label, payload.button1Callback, payload.button2Label, payload.button2Callback, payload.options, payload.context1, payload.context2);\n        break;\n    }\n  }\n};\n\n// Register event listener for messages posted from the service worker\nvar _registerListeners = function() {\n  if (_listenersRegistered) {\n    return;\n  }\n  if('serviceWorker' in navigator){\n    navigator.serviceWorker.addEventListener('message', _messageListener);\n    _listenersRegistered = true;\n  }\n};\n\nvar _deleteMessageFromDOM = function(msgID) {\n  var node = document.getElementById('progressivekitt-message-'+msgID);\n  node.classList.remove('progressivekitt-message--shown');\n  setTimeout(function() {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }, 1000);\n};\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * Identical to calling `ProgressiveKITT.render();` but less magical.\n *\n * @method vroom\n * @see [render()](#render)\n */\nvar vroom = function() {\n  this.render();\n};\n\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * @method render\n */\nvar render = function() {\n  _registerListeners();\n\n  if (!_guiCreated()) {\n    _createGUI();\n  }\n};\n\n\n/**\n * Set the URL for the stylesheet for the UI\n *\n * If a stylesheet was previously set, calling this again will update the\n * interface with a new stylesheet (if the interface was already rendered,\n * it will be updated)\n *\n * @param string stylesheet relative or absolute url to the stylesheet\n * @method setStylesheet\n */\nvar setStylesheet = function(stylesheet) {\n  _stylesheet = stylesheet;\n  _updateStylesheet();\n};\n\n/**\n * Deletes all existing messages from KITT and removes them from the DOM\n *\n * @method deleteMessages\n */\nvar deleteMessages = function() {\n  var message;\n  while ((message = _messages.shift()) !== undefined) {\n    _deleteMessageFromDOM(message.id);\n  }\n};\n\n/**\n * Deletes a single message from KITT and removes it from the DOM\n *\n * @param msgID\n * @method deleteMessage\n */\nvar deleteMessage = function(msgID) {\n  var messagesLength = _messages.length;\n  // Remove from array of messages\n  _messages = _messages.filter(function(message) {\n    return message.id !== msgID;\n  });\n  // If message id was not found, log a notice to console.\n  if (messagesLength === _messages.length) {\n    _logMessage('deleteMessage() did not find the message with the id', msgID);\n    return;\n  }\n  _deleteMessageFromDOM(msgID);\n};\n\n\n\n/**\n * Draws a message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @method addMessage\n */\nvar addMessage = function(contents, options) {\n  // @TODO: Add settings objects details in doc\n  return _addMessage(contents, options);\n};\n\n/**\n * Draws a message to the GUI with a single button.\n * Defaults: Button is labeled `OK` and dismisses the message.\n *\n * Some examples:\n * ````javascript\n * // Create a simple alert with some text and the default button labeled `OK` which will dismiss the alert:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics');\n *\n * // Create an alert with a button that will log the function's context (i.e. this) to the console.\n * // Context will be the ProgressiveKITT object by default:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', 'Go!', function() {console.log(this);});\n * // Same as the previous example but the callback function will be run with the window as its context (ie this)\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', 'Go!', function() {console.log(this);}, {}, window);\n * ````\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string buttonLabel The text to appear on the button (defaults to `OK`)\n * @param function buttonCallback A callback function to be called when button is pressed (defaults to dismissing message)\n * @param Object options Options for this message\n * @param Object context Optional context for the callback function. Defaults to ProgressiveKITT\n * @method addAlert\n */\nvar addAlert = function(contents, buttonLabel, buttonCallback, options, context) {\n  // @TODO: Add settings objects details in doc\n  buttonLabel = buttonLabel || 'OK';\n  return _addMessage(contents, options, {label: buttonLabel, cb: buttonCallback, context: context || this});\n};\n\n/**\n * Draws a message to the GUI with two buttons.\n * Defaults: Buttons are labeled `OK` and `Cancel` and both dismiss the message.\n *\n * Some examples:\n * ````javascript\n * // Create a simple confirmation with some text and two default button labeled `OK` and `cancel` which will dismiss the alert:\n * ProgressiveKITT.addConfirm('You know what the chain of command is?');\n *\n * // Create a confirmation with a yes and no buttons that will log each function's context (i.e. this) to the console.\n * // Context will be the ProgressiveKITT object by default:\n * ProgressiveKITT.addConfirm('Ready?', 'Yes', function() {console.log('Yes!');}, 'No',  function() {console.log('No!');});\n * // Same as the previous example but the callback functions will be run with the window as its context (ie this)\n * ProgressiveKITT.addConfirm('Ready?', 'Yes', function() {console.log('Yes!');}, 'No',  function() {console.log('No!');}, {}, window, window);\n * ````\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string button1Label The text to appear on the 1st button (defaults to `OK`)\n * @param function button1Callback A callback function to be called when 1st button is pressed (defaults to dismissing message)\n * @param string button2Label The text to appear on the 2nd button (defaults to `Cancel`)\n * @param function button2Callback A callback function to be called when button is pressed (defaults to dismissing message)\n * @param Object options Options for this message\n * @param Object context1 Optional context for the 1st callback function. Defaults to ProgressiveKITT\n * @param Object context2 Optional context for the 2nd callback function. Defaults to ProgressiveKITT\n * @method addConfirm\n */\nvar addConfirm = function(contents, button1Label, button1Callback, button2Label, button2Callback, options, context1, context2) {\n  // @TODO: Add settings objects details in doc\n  button1Label = button1Label || 'OK';\n  button2Label = button2Label || 'Cancel';\n  return _addMessage(contents, options, {label: button1Label, cb: button1Callback, context: context1 || this}, {label: button2Label, cb: button2Callback, context: context2 || this});\n};\n\n/**\n * Call to hide the GUI.\n *\n * Interface must have been previously rendered with render()\n *\n * @method hide\n */\nvar hide = function() {\n  if (!_guiCreated()) {\n    _logMessage('cannot hide interface. Must be rendered first');\n  }\n  _guiNodes.classList.add('progressivekitt-ui--hidden');\n};\n\n/**\n * Call to show the GUI if it has been hidden with hide()\n *\n * Interface must have been previously rendered with render()\n *\n * @method show\n */\nvar show = function() {\n  if (!_guiCreated()) {\n    _logMessage('cannot show interface. Must be rendered first');\n  }\n  _guiNodes.classList.remove('progressivekitt-ui--hidden');\n};\n\n/**\n * Turn output of debug messages to the console on or off.\n *\n * * Debug is off by default.\n * * Calling with no arguments will turn debug on.\n *\n * Examples:\n * ````javascript\n * ProgressiveKITT.debug();       // turns debug messages on\n * ProgressiveKITT.debug(true);   // turns debug messages on\n * ProgressiveKITT.debug(false);  // turns debug messages off\n * ````\n *\n * @param {boolean} [newState=true] - Turn on/off debug messages\n * @method debug\n */\nvar debug = function(newState) {\n  if (arguments.length > 0) {\n    _debugState = !!newState;\n  } else {\n    _debugState = true;\n  }\n};\n\n\nmodule.exports = {\n  setStylesheet:    setStylesheet,\n  vroom:            vroom,\n  render:           render,\n  addMessage:       addMessage,\n  addAlert:         addAlert,\n  addConfirm:       addConfirm,\n  deleteMessages:   deleteMessages,\n  deleteMessage:    deleteMessage,\n  show:             show,\n  hide:             hide,\n  debug:            debug\n};\n"]}