{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/progressive-ui-kitt.js"],"names":["_stylesheet","_stylesheetNode","_guiNodes","_debugState","_messages","_listenersRegistered","_callbacks","show-message","show-alert","show-confirm","hide-message","_getMessageElement","msgID","document","getElementById","_logMessage","text","extraParameters","arguments","length","undefined","indexOf","console","log","_guiCreated","_updateStylesheet","href","createElement","rel","id","body","appendChild","_createGUI","innerHTML","style","display","_addMessage","contents","options","_typeof","messageId","Date","now","_len","buttons","Array","_key","forEach","button","buttonId","label","newMessageNode","classList","add","class","toString","newMessage","push","buttonCallback","cb","apply","context","ProgressiveKITT","deleteMessage","addEventListener","setTimeout","isFinite","hideAfter","_messageListener","_ref","data","payload","action","addMessage","addAlert","addConfirm","button1","button2","_registerListeners","navigator","serviceWorker","_deleteMessageFromDOM","node","remove","parentNode","removeChild","_invokeCallbacks","callbackType","_len2","args","_key2","callback","_parseButtonObject","buttonObject","this","vroom","render","setStylesheet","stylesheet","deleteMessages","message","shift","filteredMessages","filter","hide","show","debug","newState","addCallback","type","removeCallback","compareWithCallbackParameter","Object","keys","module","exports"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n<!--\nProgressive UI KITT\nversion : 0.0.1\nauthor  : Tal Ater @TalAter\nlicense : MIT\nhttps://github.com/TalAter/Progressive-UI-KITT\n-->\n*/\n\n\"use strict\";\n\nvar _stylesheet;\nvar _stylesheetNode;\nvar _guiNodes;\nvar _debugState = false;\nvar _messages = [];\nvar _listenersRegistered = false;\nvar _callbacks = { \"show-message\": [], \"show-alert\": [], \"show-confirm\": [], \"hide-message\": [] };\n\n\n// Return a message element for a given message id\nvar _getMessageElement = function(msgID) {\n  return document.getElementById(`progressivekitt-message-${msgID}`);\n};\n\n// Log a message to the console if debug mode is on\nvar _logMessage = function(text, extraParameters = 'font-weight: bold; color: #00f;') {\n  if (!_debugState) {\n    return;\n  }\n  if (text.indexOf('%c') === -1 && !extraParameters) {\n    console.log(text);\n  } else {\n    console.log(text, extraParameters);\n  }\n};\n\n// Checks if GUI was already created\nvar _guiCreated = function () {\n  return _guiNodes !== undefined;\n};\n\n// Attach a style sheet if GUI already attached, if already attached, update it's href\nvar _updateStylesheet = function() {\n  if (_stylesheet && _guiCreated()) {\n    if (_stylesheetNode) {\n      _stylesheetNode.href = _stylesheet;\n    } else {\n      _stylesheetNode = document.createElement('link');\n      _stylesheetNode.rel = 'stylesheet';\n      _stylesheetNode.href = _stylesheet;\n      _stylesheetNode.id = 'progressivekitt-style-sheet';\n      document.body.appendChild(_stylesheetNode);\n    }\n  }\n};\n\n// Called once to generate the GUI nodes\nvar _createGUI = function() {\n  // create GUI\n  _guiNodes = document.createElement('div');\n  _guiNodes.id = 'progressivekitt-ui';\n  _guiNodes.innerHTML = '';\n  _guiNodes.style.display = 'none';\n  document.body.appendChild(_guiNodes);\n\n  _updateStylesheet();\n};\n\n// Adds a new message and draws it\nvar _addMessage = function(contents, options, ...buttons) {\n  // @TODO: Keep message id in a data attribute\n  if (!_guiCreated()) {\n    return;\n  }\n  if (typeof contents !== 'string') {\n    return;\n  }\n  options = options || {};\n  if (typeof options !== 'object') {\n    _logMessage('Invalid options object');\n  }\n\n  const messageId = _messages.length+Date.now();\n\n  // Add buttons to contents if needed\n  buttons.forEach((button, buttonId) => {\n    if (button) {\n      contents += `<span class=\"progressivekitt-button\" id=\"progressivekitt-button-${buttonId}-${messageId}\">${button.label}</span>`;\n    }\n  });\n\n  var newMessageNode = document.createElement('div');\n  newMessageNode.id = `progressivekitt-message-${messageId}`;\n  newMessageNode.innerHTML = contents;\n  newMessageNode.classList.add('progressivekitt-message');\n\n  if (options.class) {\n    newMessageNode.classList.add(options.class.toString());\n  }\n\n  var newMessage = {\n    id: messageId,\n    contents: contents\n  };\n\n  _messages.push(newMessage);\n\n  _guiNodes.appendChild(newMessageNode);\n\n  // Add button actions\n  buttons.forEach((button, buttonId) => {\n    if (button) {\n      var buttonCallback = function() {\n        if (button.cb) {\n          button.cb.apply(button.context);\n        }\n        ProgressiveKITT.deleteMessage(messageId);\n      };\n      document.getElementById(`progressivekitt-button-${buttonId}-${messageId}`).addEventListener(\"click\", buttonCallback, false);\n    }\n  });\n\n  //Delay showing of the message by 20 ms. Helps make sure CSS animations happen consistently.\n  setTimeout(() => {\n    newMessageNode.classList.add('progressivekitt-message--shown');\n  }, 20);\n\n  if (isFinite(options.hideAfter) && options.hideAfter > 0) {\n    setTimeout(() => {\n      ProgressiveKITT.deleteMessage(messageId);\n    }, options.hideAfter);\n  }\n\n  return messageId;\n};\n\n// A listener used to parse messages posted from the service worker\nvar _messageListener = function({data: data}) {\n  if (typeof data === 'object') {\n    var payload = data.payload;\n    switch (data.action) {\n      case 'pkitt-message':\n        ProgressiveKITT.addMessage(payload.contents, payload.options);\n        break;\n      case 'pkitt-alert':\n        ProgressiveKITT.addAlert(payload.contents, payload.button.label, payload.options);\n        break;\n      case 'pkitt-confirm':\n        ProgressiveKITT.addConfirm(payload.contents, payload.button1.label, payload.button2.label, payload.options);\n        break;\n    }\n  }\n};\n\n// Register event listener for messages posted from the service worker\nvar _registerListeners = function() {\n  if (_listenersRegistered) {\n    return;\n  }\n  if('serviceWorker' in navigator){\n    navigator.serviceWorker.addEventListener('message', _messageListener);\n    _listenersRegistered = true;\n  }\n};\n\n// Receives a message id, and deletes the message node from the DOM\nvar _deleteMessageFromDOM = function(msgID) {\n  var node = _getMessageElement(msgID);\n  node.classList.remove('progressivekitt-message--shown');\n  setTimeout(() => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }, 1000);\n};\n\n// This method receives an array of callbacks to iterate over, and invokes each of them\nvar _invokeCallbacks = function(callbackType, ...args) {\n  _callbacks[callbackType].forEach(function(callback) {\n    callback.callback.apply(callback.context, args);\n  });\n};\n\n// Parse a button argument to make sure it is an object with the structure and contents KITT expects\nvar _parseButtonObject = function(button) {\n  let buttonObject = ('string' === typeof button) ? {label: button} : button;\n  if (!buttonObject.context) {\n    buttonObject.context = this;\n  }\n  return buttonObject;\n};\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * Identical to calling `ProgressiveKITT.render();` but less magical.\n *\n * @method vroom\n * @see [render()](#render)\n */\nvar vroom = function() {\n  this.render();\n};\n\n\n/**\n * Call after configuring KITT, to render its interface.\n *\n * @method render\n */\nvar render = function() {\n  _registerListeners();\n\n  if (!_guiCreated()) {\n    _createGUI();\n  }\n};\n\n\n/**\n * Set the URL for the stylesheet for the UI\n *\n * If a stylesheet was previously set, calling this again will update the\n * interface with a new stylesheet (if the interface was already rendered,\n * it will be updated)\n *\n * @param string stylesheet relative or absolute url to the stylesheet\n * @method setStylesheet\n */\nvar setStylesheet = function(stylesheet) {\n  _stylesheet = stylesheet;\n  _updateStylesheet();\n};\n\n/**\n * Deletes all existing messages from KITT and removes them from the DOM\n *\n * @method deleteMessages\n */\nvar deleteMessages = function() {\n  var message;\n  while ((message = _messages.shift()) !== undefined) {\n    _deleteMessageFromDOM(message.id);\n  }\n};\n\n/**\n * Deletes a single message from KITT and removes it from the DOM\n *\n * @param msgID\n * @method deleteMessage\n */\nvar deleteMessage = function(msgID) {\n  // Remove from array of messages\n  let filteredMessages = _messages.filter(message => {\n    return message.id !== msgID;\n  });\n  // If message id was not found, log a notice to console.\n  if (filteredMessages.length === _messages.length) {\n    _logMessage('deleteMessage() did not find the message with the id', msgID);\n    return;\n  }\n  _messages = filteredMessages;\n  _invokeCallbacks('hide-message');\n  _deleteMessageFromDOM(msgID);\n};\n\n/**\n * Draws a message to the GUI\n *\n * @param string contents The contents of the message (text or HTML)\n * @param Object options Options for this message\n * @method addMessage\n */\nvar addMessage = function(contents, options) {\n  // @TODO: Add options object details in doc\n  var msgID = _addMessage(contents, options);\n  _invokeCallbacks('show-message', _getMessageElement(msgID));\n  return msgID;\n};\n\n/**\n * Draws a message to the GUI with a single button.\n *\n * Defaults: Button is labeled `OK` and dismisses the message.\n *\n * Some examples:\n * ````javascript\n * // Create a simple alert with some text and the default button labeled `OK` which will dismiss the alert:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics');\n *\n * // Create a simple alert with some text and a custom button:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', 'Go!');\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', {label: 'Go!'});\n *\n * // Create an alert with a button that will log the function's context (i.e. this) to the console.\n * // Context will be the ProgressiveKITT object by default:\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', {label:'Go!', callback: function() {console.log(this);}});\n * // Same as the previous example but the callback function will be run with the window as its context (i.e. this)\n * ProgressiveKITT.addAlert('Time for some thrilling heroics', {label:'Go!', callback: function() {console.log(this);}, context: window});\n * ````\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string|Object button The text to appear on the button (defaults to `OK`), or an object containing details about the button (e.g. `{label: 'ok', callback: fn, context: window}`)\n * @param Object options Options for this message\n * @method addAlert\n */\nvar addAlert = function(contents, button = 'OK', options = undefined) {\n  button = _parseButtonObject(button);\n  // @TODO: Add options object details in doc\n  var msgID = _addMessage(contents, options, {label: button.label, cb: button.callback, context: button.context});\n  _invokeCallbacks('show-alert', _getMessageElement(msgID));\n  return msgID;\n};\n\n/**\n * Draws a message to the GUI with two buttons.\n *\n * Defaults: Buttons are labeled `OK` and `Cancel` and both dismiss the message.\n *\n * Some examples:\n * ````javascript\n * // Create a simple confirmation with some text and two default button labeled `OK` and `cancel` which will dismiss the alert:\n * ProgressiveKITT.addConfirm('You know what the chain of command is?');\n *\n * // Create a confirmation with a yes and no buttons that will log each function's context (i.e. this) to the console.\n * // Context will be the ProgressiveKITT object by default:\n * ProgressiveKITT.addConfirm('Ready?', {label: 'Yes', callback: function() {console.log('Yes!');}}, {label:'No', callback: function() {console.log('No!');}});\n * // Same as the previous example but the callback functions will be run with the window as its context (i.e. this)\n * ProgressiveKITT.addConfirm('Ready?', {label: 'Yes', callback: function() {console.log('Yes!');}, context: window}, {label:'No', callback: function() {console.log('No!');}, context: window});\n * ````\n *\n * @param string contents The contents of the message (text or HTML)\n * @param string|Object button1 The text to appear on the button (defaults to `OK`), or an object containing details about the button (e.g. {label: 'ok', callback: fn, context: window})\n * @param string|Object button2 The text to appear on the button (defaults to `Cancel`), or an object containing details about the button (e.g. {label: 'ok', callback: fn, context: window})\n * @param Object options Options for this message\n * @method addConfirm\n */\nvar addConfirm = function(contents, button1 = 'OK', button2 = 'Cancel', options = undefined) {\n  button1 = _parseButtonObject(button1);\n  button2 = _parseButtonObject(button2);\n  // @TODO: Add options object details in doc\n  var msgID =  _addMessage(contents, options, {label: button1.label, cb: button1.callback, context: button1.context}, {label: button2.label, cb: button2.callback, context: button2.context});\n  _invokeCallbacks('show-confirm', _getMessageElement(msgID));\n  return msgID;\n};\n\n/**\n * Call to hide the GUI.\n *\n * Interface must have been previously rendered with render()\n *\n * @method hide\n */\nvar hide = function() {\n  if (!_guiCreated()) {\n    _logMessage('cannot hide interface. Must be rendered first');\n  }\n  _guiNodes.classList.add('progressivekitt-ui--hidden');\n};\n\n/**\n * Call to show the GUI if it has been hidden with hide()\n *\n * Interface must have been previously rendered with render()\n *\n * @method show\n */\nvar show = function() {\n  if (!_guiCreated()) {\n    _logMessage('cannot show interface. Must be rendered first');\n  }\n  _guiNodes.classList.remove('progressivekitt-ui--hidden');\n};\n\n/**\n * Turn output of debug messages to the console on or off.\n *\n * * Debug is off by default.\n * * Calling with no arguments will turn debug on.\n *\n * Examples:\n * ````javascript\n * ProgressiveKITT.debug();       // turns debug messages on\n * ProgressiveKITT.debug(true);   // turns debug messages on\n * ProgressiveKITT.debug(false);  // turns debug messages off\n * ````\n *\n * @param {boolean} [newState=true] - Turn on/off debug messages\n * @method debug\n */\nvar debug = function(newState = true) {\n  _debugState = !!newState;\n};\n\n/**\n * Add a callback function to be called in case one of the following events happens:\n *\n * * `show-message` - Fired when a message is shown\n * * `show-alert` - Fired when an alert is shown\n * * `show-confirm` - Fired when an alert is shown\n *\n * #### Examples:\n * ````javascript\n * ProgressiveKITT.addCallback('show-message', function() {\n *   console.log('A message was just shown');;\n * });\n *\n * ````\n * @param {String} type - Name of event that will trigger this callback\n * @param {Function} callback - The function to call when event is triggered\n * @param {Object} [context] - Optional context for the callback function to be run in\n * @method addCallback\n */\nvar addCallback = function(type, callback, context) {\n  if (_callbacks[type]  === undefined) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    return;\n  }\n  _callbacks[type].push({callback: callback, context: context || this});\n};\n\n/**\n * Remove callbacks from events.\n *\n * - Pass an event name and a callback command to remove that callback command from that event type.\n * - Pass just an event name to remove all callback commands from that event type.\n * - Pass undefined as event name and a callback command to remove that callback command from all event types.\n * - Pass no params to remove all callback commands from all event types.\n *\n * #### Examples:\n * ````javascript\n * ProgressiveKITT.addCallback('show-message', myFunction1);\n * ProgressiveKITT.addCallback('show-message', myFunction2);\n * ProgressiveKITT.addCallback('show-alert', myFunction1);\n * ProgressiveKITT.addCallback('show-alert', myFunction2);\n *\n * // Remove all callbacks from all events:\n * ProgressiveKITT.removeCallback();\n *\n * // Remove all callbacks attached to 'show-alert' event:\n * ProgressiveKITT.removeCallback('show-alert');\n *\n * // Remove myFunction2 from being called on 'show-message' event:\n * ProgressiveKITT.removeCallback('show-message', myFunction2);\n *\n * // Remove myFunction1 from being called on all events:\n * ProgressiveKITT.removeCallback(undefined, myFunction1);\n * ````\n *\n * @param   {String}    [type]      Name of event type to remove callback from\n * @param   {Function}  [callback]  The callback function to remove\n * @returns undefined\n * @method  removeCallback\n */\nvar removeCallback = function(type, callback) {\n  let compareWithCallbackParameter = cb => {\n    return cb.callback !== callback;\n  };\n  // Go over each callback type in callbacks store object\n  Object.keys(_callbacks).forEach(callbackType => {\n    // if this is the type user asked to delete, or she asked to delete all, go ahead.\n    if (type === undefined || type === callbackType) {\n      // If user asked to delete all callbacks in this type or all types\n      if (callback === undefined) {\n          _callbacks[callbackType] = [];\n        } else {\n          // Remove all matching callbacks\n          _callbacks[callbackType] = _callbacks[callbackType].filter(compareWithCallbackParameter);\n      }\n    }\n  });\n};\n\nmodule.exports = {\n  setStylesheet,\n  vroom,\n  render,\n  addMessage,\n  addAlert,\n  addConfirm,\n  deleteMessages,\n  deleteMessage,\n  show,\n  hide,\n  debug,\n  addCallback,\n  removeCallback\n};\n"]}